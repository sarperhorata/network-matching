services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: oniki-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: oniki_net
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - oniki-network

  # Redis Cache
  redis:
    image: redis:6-alpine
    container_name: oniki-redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - oniki-network

  # Oniki Platform (Backend + Frontend in one container)
  oniki:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:3000/api}
        VITE_WS_URL: ${VITE_WS_URL:-http://localhost:3000}
    container_name: oniki
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_NAME: oniki_net
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      # JWT
      JWT_SECRET: ${JWT_SECRET:-change-me-in-production}
      JWT_EXPIRES_IN: 7d
      # Application
      PORT: 3000
      NODE_ENV: production
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:80}
    ports:
      - '3000:3000'  # Backend API
      - '80:80'      # Frontend
    volumes:
      - ./backend/uploads:/app/backend/uploads
    healthcheck:
      test: ['CMD-SHELL', 'wget --no-verbose --tries=1 --spider http://localhost:3000/api/health && wget --no-verbose --tries=1 --spider http://localhost:80/ || exit 1']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - oniki-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  oniki-network:
    name: oniki-network
    driver: bridge
